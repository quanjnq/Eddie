import os
import sys

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import logging
import random
from selection.dbms.postgres_dbms import PostgresDatabaseConnector
from selection.table_generator import TableGenerator
import argparse
from util.log_util import setup_logging

def import_database(workload_name, scale_factor, explicit_database_name=None, host=None, port=None, user=None, password=None, run_id=None, conneted_database_name=None):
    random.seed(0)
    log_id = run_id if run_id else f"import_db_{workload_name}_{str(scale_factor)}"
    scale_factor = float(scale_factor)
    port = int(port)
    setup_logging(log_id)
    
    import_param = {"workload_name":workload_name, "scale_factor":scale_factor, "explicit_database_name":explicit_database_name, "host":host, "port":port, "user":user, "run_id":run_id}
    logging.info(f"Start importing the database, used param: {import_param}")
    generating_connector = PostgresDatabaseConnector(conneted_database_name, autocommit=True, host=host, port=port, user=user, password=password)
    table_generator = TableGenerator(
        workload_name, scale_factor, generating_connector, explicit_database_name
    )
    database_name = table_generator.database_name()
    logging.info(f"Database {database_name} is successfully imported")


def main(run_cfg):
    if len(run_cfg) == 0:
        # Default paper usage parameters
        import_configs = [{"workload_name": "tpcds", "scale_factor_list": [10, 5]}, {"workload_name": "tpch", "scale_factor_list": [10, 5]}]
        for cfg in import_configs:
            workload_name = cfg["workload_name"]
            for scale_factor in cfg["scale_factor_list"]:
                import_database(workload_name, scale_factor)
    else:
        # Use command-line arguments
        run_id = run_cfg["run_id"]
        workload_name = run_cfg["workload_name"]
        scale_factor = run_cfg["scale_factor"]
        
        host = run_cfg["host"] if "host" in run_cfg else None
        port = run_cfg["port"] if "port" in run_cfg else None
        user = run_cfg["user"] if "user" in run_cfg else None
        password = run_cfg["password"] if "password" in run_cfg else None
        conneted_database_name = run_cfg["conneted_database_name"] if "conneted_database_name" in run_cfg else None
        explicit_database_name = run_cfg["explicit_database_name"] if "explicit_database_name" in run_cfg else None
        import_database(workload_name, scale_factor, explicit_database_name=explicit_database_name, host=host, port=port, user=user, password=password, run_id=run_id, conneted_database_name=conneted_database_name)
    


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Run Eddie model training and evaluation')
    # Required arguments
    parser.add_argument('--run_id', type=str, required=True, help='Unique identifier for this run. This will be used for logging naming.')
    parser.add_argument('--workload_name', type=str, required=True, help='Indicates the type of database to be imported, (i.e., tpcds or tpch)')
    parser.add_argument('--scale_factor', type=str, required=True, help='The size of the imported database, (e.g., 1 means 1G)')

    # Optional arguments
    parser.add_argument('--host', type=str, help='The host address used for the connection')
    parser.add_argument('--port', type=str, help='The port used for the connection')
    parser.add_argument('--user', type=str, help='The username used for the connection')
    parser.add_argument('--password', type=str, help='The password used for the connection')
    parser.add_argument('--conneted_database_name', type=str, help='The database name used for the connection')
    parser.add_argument('--explicit_database_name', type=str, help='The name of the database to be imported, which is created at the time of import. If the database name already exists, it will not be imported again.(Automatically generated by default)')
    
    args = parser.parse_args()
    cfg = vars(args)  # Convert args directly to dictionary
    main(cfg)
    
    
        

''' example
python database_scripts/import_database.py \
    --run_id import_tpcds_1 \
    --workload_name tpcds \
    --scale_factor 1 \
    --host localhost \
    --port 54321 \
    --user postgres \
    --password {your_password} \
    --conneted_database_name postgres \
    --explicit_database_name tpcds_1g
'''
